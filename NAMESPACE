useDynLib(ramwas, .registration = TRUE)
exportPattern("^[[:alpha:]]+")

# 

importFrom("methods", "setRefClass", "new")
importFrom("grDevices", "dev.off", "pdf")
importFrom("graphics", "abline", "legend", "lines", "par", "plot", "points", "title", "axis", "barplot")
importFrom("stats", "complete.cases", "pf", "pt", "qf", "qt", "optim", "model.matrix", "quantile", "median", "qlogis", "plogis", "qbeta", "cor", "lm")
importFrom("utils", "flush.console", "head", "tail", "tail.matrix", "read.table", "write.table")
importFrom("GenomicAlignments", "cigarWidthAlongQuerySpace", "cigarWidthAlongReferenceSpace")
importFrom("Rsamtools", "scanBamFlag", "ScanBamParam", "BamFile", "open.BamFile", "scanBam")
importFrom("parallel", "makeCluster", "clusterEvalQ", "clusterApplyLB", "stopCluster", "detectCores", "clusterExport") #"makePSOCKcluster"
importFrom("KernSmooth","locpoly");
importFrom("digest", "digest")
importFrom("glmnet", "cv.glmnet", "predict.cv.glmnet")

importFrom("filematrix", "fm.create", "fm.load", "fm.open", "fm.create.from.matrix","closeAndDeleteFiles")
importClassesFrom("filematrix", "filematrix")
importMethodsFrom("filematrix", "close")

S3method(plot, qcHistScore)
S3method(plot, qcEditDist)
S3method(plot, qcLengthMatched)
S3method(plot, qcHistScoreBF)
S3method(plot, qcEditDistBF)
S3method(plot, qcLengthMatchedBF)
S3method(plot, qcIsoDist)
S3method(plot, qcCoverageByDensity)


S3method(qcmean, qcHistScore)
S3method(qcmean, qcEditDist)
S3method(qcmean, qcLengthMatched)
S3method(qcmean, qcHistScoreBF)
S3method(qcmean, qcEditDistBF)
S3method(qcmean, qcLengthMatchedBF)
S3method(qcmean, qcIsoDist)

S3method(qcmean, qcFrwrev)
S3method(qcmean, qcNonCpGreads)
S3method(qcmean, qcCoverageByDensity)
S3method(qcmean, qcChrX)
S3method(qcmean, qcChrY)
S3method(qcmean, NULL)
